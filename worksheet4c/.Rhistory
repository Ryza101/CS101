exhaustive_search <- function(selected_number)
if (selected_number < 1 || selected_number > 50) {
return("The number selected is beyond the range of 1 to 50")
} else if (selected_number == 20) {
return("TRUE")
} else {
return(as.character(selected_number))
}
random_number <- sample(1:50, 1)
print("The chosen number is:", random_number)
exhaustive_search <- function(selected_number)
if (selected_number < 1 || selected_number > 50) {
return("The number selected is beyond the range of 1 to 50")
} else if (selected_number == 20) {
return("TRUE")
} else {
return(as.character(selected_number))
}
random_number <- sample(1:50, 1)
cat("The chosen number is:", random_number)
result <- exhaustive_search(random_number)
cat("Result:", result)
exhaustive_search <- function(selected_number)
if (selected_number < 1 || selected_number > 50) {
return("The number selected is beyond the range of 1 to 50")
} else if (selected_number == 20) {
return("TRUE")
} else {
return(as.character(selected_number))
}
random_number <- sample(1:50, 1)
cat("The chosen number is:", random_number, "\n")
result <- exhaustive_search(random_number)
cat("Result:", result, "\n")
min_bills <- function(price) {
bills <- c(1000, 500, 200, 100, 50)
bill_count <- 0
if (price %% 50 != 0) {
return("Price must be a multiple of 50.")
}
for (bill in bills) {
while (price >= bill) {
price <- price - bill
bill_count <- bill_count + 1
}
}
return(bill_count)
}
price_of_snack <- 2700
cat("Minimum number of bills needed:", min_bills(price_of_snack), "\n")
vectorA= [1,2,3,4,5]
vectorA= (1,2,3,4,5)
vectorA <- c(1,2,3,4,5)
matrixA <- matrix(0, nrow=5, ncol=5)
for(i in 1:5){
for(j in 1:5){
matrixA[i, j] <-ifelse(j>=i, vectorA[abs(j-i)+1],0)
}
}
vectorA <- c(1,2,3,4,5)
matrixA <- matrix(0, nrow=5, ncol=5)
for(i in 1:5){
for(j in 1:5){
matrixA[i, j] <-ifelse(j>=i, vectorA[abs(j-i)+1],0)
}
}
print(matrixA)
for (i in 1:5) {
for (j in 1:i) {
cat("*")
}
cat("\n")
for (i in 1:5) {
for (j in 1:i) {
cat("*")
}
cat("\n")
for (i in 1:5) {
for (j in 1:i) {
cat("*")
}
cat("\n")
}
num <- readline(prompt = "Enter the starting position for the Fibonacci sequence")
# Prompt user for starting position
start_pos <- as.integer(readline(prompt = "Enter the starting position: "))
# Initialize variables
fib1 <- 0
fib2 <- 1
count <- 1
fib_sequence <- c()
# Repeat loop to generate Fibonacci sequence
repeat {
# Calculate the next Fibonacci number
fib_next <- fib1 + fib2
# Check if current position is within the user-defined range and fib_next is under 500
if (!is.na(start_pos) && count >= start_pos && fib_next <= 500) {
fib_sequence <- c(fib_sequence, fib_next)
}
# Update values for next iteration
fib1 <- fib2
fib2 <- fib_next
count <- count + 1
# Break if next Fibonacci number exceeds 500
if (fib_next > 500) break
}
# Print the generated Fibonacci sequence
print(fib_sequence)
A <- as.integer(readline(prompt = "Enter the starting position: "))
fib1 <- 0
fib2 <- 1
count <- 1
fib_sequence <- c()
repeat {
z <- fib1 + fib2
if (!is.na(A) && count >= A && z <= 500) {
fib_sequence <- c(fib_sequence, z)
}
fib1 <- fib2
fib2 <- z
count <- count + 1
if (z > 500) break
}
print(fib_sequence)
set.seed(1)
# Generate sample data
x <- rnorm(500)
y <- x + rnorm(500)
par(mfrow = c(2, 3))
# Data
#rnonm() simulates random variates having a specified normal distribution
my_ts <- ts(matrix(rnorm(500), nrow = 500, ncol = 1),
start = c(1950, 1), frequency = 12)
my_dates <- seq(as.Date("2005/1/1"), by = "month", length = 50)
my_factor <- factor(mtcars$cyl) #mtcars is from the dataset that was already installed in R
fun <- function(x) x^2
# Scatterplot
plot(x, y, main = "Scatterplot")
# Barplot
plot(my_factor, main = "Barplot")
# Boxplot
plot(my_factor, rnorm(32), main = "Boxplot")
# Time series plot
plot(my_ts, main = "Time series")
# Time-based plot
plot(my_dates, rnorm(50), main = "Time based plot")
# Plot R function
plot(fun, 0, 10, main = "Plot a function")
r <- c(sapply(seq(5, 25, 5), function(i) rep(i, 5)))
t <- rep(seq(25, 5, -5), 5)
plot(r,t, pch = 21:25, cex = 3, yaxt = "n", xaxt = "n", lwd = 3,
ann = FALSE, xlim = c(3, 27), bg = 1:25, col = rainbow(25))
text(r - 1.5, t, 1:25)
x <- rnorm(500)
y <- x + rnorm(500)
plot(x, y, pch = 21,
bg = "yellow",   # Fill color
col = "green", # Border color
cex = 3,      # Symbol size
lwd = 3)
x <- c(1:5)
y <- c(1:5)
plot(x,y, pch = c("☺", "❤", "✌", "❄", "✈"),
col = c("orange", 2:5), cex = 3,
xlim = c(0, 6), ylim = c(0, 6))
cars <- c(1,3,6,4,9)
trucks <- c(2,5,4,5,12)
#calculate range from 0 to max value of cars and trucks
rangeData <- range(0,cars,trucks)
plot(cars, type = "o", pch = 17, col = "blue", ylim = rangeData,
axes = F, ann = F)
lines(trucks,type = "o",pch = 23, lty = 2, col = "red")
#x and the y axis
#  y axis displays ticks at every 4 marks. 4*0:rangeData[2] is equivalent to c(0,4,8,12)
# las are labels parallel (=0) or perpendicular (=2) to axis
axis(2, las=1, at=4*0:rangeData[2])
axis(1, at=1:5, lab=c("Mon","Tue","Wed","Thu","Fri"))
#labeling using title() for main, x axis = xlab, y axis = ylab
title(main = "Autos",
xlab = "Days",
ylab = "Total",
col.main = "red", font.main = 4,
col.lab = rgb(0,0.5,0)) #darkgreen
# using legend() function to place labels inside the plot
legend(1,12, c("cars","trucks"), cex = 0.8, col = c("blue","red"),lty = 1:2)
par(mfrow = c(1, 3))
group <- ifelse(x < 0 , "car", ifelse(x > 1, "plane", "boat"))
df <- data.frame(x = x, y = y, group = factor(group))
# Color by group
plot(df$x, df$y, col = df$group, pch = 16)
# Change group colors
colors <- c("red", "green", "blue")
plot(df$x, df$y, col = colors[df$group], pch = 16)
# Change color order, changing levels order
plot(df$x, df$y, col = colors[factor(group, levels = c("car", "boat", "plane"))],
pch = 16)
par(mfrow = c(1, 3))
group <- ifelse(x < 0 , "car", ifelse(x > 1, "plane", "boat"))
df <- data.frame(x = x, y = y, group = factor(group))
# Color by group
plot(df$x, df$y, col = df$group, pch = 16)
par(mfrow = c(1, 3))
group <- ifelse(x < 0 , "car", ifelse(x > 1, "plane", "boat"))
df <- data.frame(x = x, y = y, group = factor(group))
# Color by group
plot(df$x, df$y, col = df$group, pch = 16)
par(mfrow = c(1, 3))
group <- ifelse(x < 0 , "car", ifelse(x > 1, "plane", "boat"))
df <- data.frame(x = x, y = y, group = factor(group))
# Color by group
plot(df$x, df$y, col = df$group, pch = 16)
# Change group colors
colors <- c("cyan", "darkblue", "pink")
plot(df$x, df$y, col = colors[df$group], pch = 16)
# Change color order, changing levels order
plot(df$x, df$y, col = colors[factor(group, levels = c("car", "boat", "plane"))],
pch = 16)
data("longley")
data("Titanic")
summary((d.Titanic <- as.data.frame(Titanic))
data("Titanic")
summary(d.Titanic <- as.data.frame(Titanic))
barplot(Freq ~ Class + Survived, data = d.Titanic,
subset = Age == "Adult" & Sex == "Male",
main = "Titanic DataSet",
ylab = "Number of passengers",
legend = TRUE)
cars <- c(1,3,6,4,9)
#Adding colors, density and labels
barplot(cars,col = rainbow(5),density = c(10,20,30,40,50),
main = "Cars",
xlab = "Days",
ylab = "Total", names.arg = c("Mon","Tue","Wed","Thu","Fri"))
data(mpg)
mpg <- read.csv(file = "mpg.csv", header = T, sep = ",")
install.packages("ggplot2")
install.packages("ggplot2")
library(gglpot2)
install.packages("ggplot2")
library(ggplot2)
data(mpg)
mpg <- read.csv(file = "mpg.csv", header = T, sep = ",")
head(mpg)
summary(mpg)
str(mpg)
write.csv(mpg, "mpg_data.csv", row.names = FALSE)
write.csv(mpg, "mpg_data.csv", row.names = FALSE)
write.csv(mpg, "mpg_data.csv", row.names = FALSE)
mpg_data <- read.csv("mpg_data.csv")
write.csv(mpg, "mpg_data.csv", row.names = FALSE)
mpg_data <- read.csv("mpg_data.csv")
setwd("C:/Users/ruelah/Documents/DataScience/CS101")
setwd("C:/Users/ruelah/Documents/DataScience/CS101/worksheet4c")
mpg <- read.csv(file = "~/DataScience/CS101/worksheet4c/mpg.csv", header = T, sep = ",")
head(mpg)
qplot(manufacturer, data = mpg,
geom = "bar",
fill = manufacturer)
qplot(displ, data = mpg,
geom = "histogram",
bins = 30)
qplot(x = displ,y = hwy,
data = mpg,
geom = "point",
color = "cyan")
qplot(x = displ,y = hwy,
data = mpg,
geom = "point",
color = "cyan")
qplot(x = displ,y = hwy,
data = mpg,
geom = "point",
color = "blue")
df_col <- mpg$drv
qplot(x = cyl,y = cty,
data = mpg,
geom = "point",
color = df_col,
main = "Relationship of city mileage (cty) and the number of cylinders(cyl)")
qplot(x = displ,y = hwy,
data = mpg,
geom = "point",
color = "red")
df_col <- mpg$drv
qplot(x = cyl,y = cty,
data = mpg,
geom = "point",
color = Spectral,
main = "Relationship of city mileage (cty) and the number of cylinders(cyl)")
df_col <- mpg$drv
qplot(x = cyl,y = cty,
data = mpg,
geom = "point",
color = Set3,
main = "Relationship of city mileage (cty) and the number of cylinders(cyl)")
df_col <- mpg$drv
qplot(x = cyl,y = cty,
data = mpg,
geom = "point",
color = df_col,
main = "Relationship of city mileage (cty) and the number of cylinders(cyl)")
ggplot(mpg, aes(model, manufacturer)) + geom_point()
ggplot(mpg, aes(model, year)) + geom_point()
qplot(x = displ,y = hwy,
data = mpg,
geom = "point",
col = "red")
qplot(x = displ,y = hwy,
data = mpg,
geom = "point",
col = "green")
qplot(x = displ,y = hwy,
data = mpg,
geom = "point",
col = "red")
qplot(x= displ, y =hwy,
data = mpg,
geom = "point",
color = "green")
install.packages("polite")
install.packages("remote")
remotes::install_github("dmi3kno/polite")
qplot(x=displ, y=hwy,
data = mpg,
geom = "point",
color = "red")
df_col <- Set3
df_col <- Dark2
df_col <- mpg$Dark2
qplot(x = cyl,y = cty,
data = mpg,
geom = "point",
color = df_col,
main = "Relationship of city mileage (cty) and the number of cylinders(cyl)")
df_col <- mpg$Spectral
qplot(x = cyl,y = cty,
data = mpg,
geom = "point",
color = df_col,
main = "Relationship of city mileage (cty) and the number of cylinders(cyl)")
qplot(x = cyl,y = cty,
data = mpg,
geom = "point",
color = "green"
main = "Relationship of city mileage (cty) and the number of cylinders(cyl)")
install.packages("RColorBrewer")
df_col <- mpg$Dark2
qplot(x = cyl,y = cty,
data = mpg,
geom = "point",
color = df_col,
main = "Relationship of city mileage (cty) and the number of cylinders(cyl)")
qplot(x=displ, y=hwy,
data = mpg,
geom = "point",
color = "red")
plot(manufacturer, data = mpg,
geom = "bar",
fill = manufacturer)
qplot(manufacturer, data = mpg,
geom = "bar",
fill = manufacturer)
library(readxl)
datampg <- read_excel("~/DataScience/CS101/worksheet4c/mpg.csv")
mpg_data <- read.csv("mpg.csv")
head(mpg_data)
library(dplyr)
model_count_by_manufacturer <- mpg_data %>%
group_by(manufacturer) %>%
summarise(unique_models = n_distinct(model)) %>%
arrange(desc(unique_models))
print(model_count_by_manufacturer)
library(dplyr)
model_count_by_manufacturer <- mpg_data %>%
group_by(manufacturer) %>%
summarise(unique_models = n_distinct(model)) %>%
arrange(desc(unique_models))
print(model_count_by_manufacturer)
variation_count_by_model <- mpg_data %>%
group_by(model) %>%
summarise(variations = n()) %>%
arrange(desc(variations))
print(variation_count_by_model)
sorted_data <- model_count_by_manufacturer[order(model_count_by_manufacturer$unique_models, decreasing = TRUE),]
barplot(sorted_data$unique_models, names.arg = sorted_data$manufacturer, las = 2, col = "cyan",
main = "Number of Unique Models by Manufacturer",
xlab = "Manufacturer", ylab = "Number of Unique Models")
library(ggplot2)
ggplot(model_count_by_manufacturer, aes(x = reorder(manufacturer, -unique_models), y = unique_models)) +
geom_bar(stat = "identity", fill = "cyan") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Number of Unique Models by Manufacturer",
x = "Manufacturer", y = "Number of Unique Models")
ggplot(mpg_data, aes(x = model, y = manufacturer)) + geom_point()
top_20_mpg <- mpg_data[1:20, ]
ggplot(top_20_mpg, aes(x = model, y = year)) +
geom_point(color = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Model vs. Year (Top 20 Observations)",
x = "Model", y = "Year")
library(dplyr)
cars_per_model <- mpg_data %>%
group_by(model) %>%
summarise(car_count = n()) %>%
arrange(desc(car_count))
print(cars_per_model)
top_20_models <- cars_per_model[1:20, ]
library(ggplot2)
ggplot(top_20_models, aes(x = reorder(model, -car_count), y = car_count, fill = model)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Models by Number of Cars",
x = "Model",
y = "Number of Cars") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
top_20_models <- cars_per_model[1:20, ]
library(ggplot2)
ggplot(top_20_models, aes(x = reorder(model, -car_count), y = car_count, fill = model)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Models by Number of Cars",
x = "Model",
y = "Number of Cars") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Dark3")
top_20_models <- cars_per_model[1:20, ]
library(ggplot2)
ggplot(top_20_models, aes(x = reorder(model, -car_count), y = car_count, fill = model)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Models by Number of Cars",
x = "Model",
y = "Number of Cars") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Paired")
top_20_models <- cars_per_model[1:20, ]
library(ggplot2)
ggplot(top_20_models, aes(x = reorder(model, -car_count), y = car_count, fill = model)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Models by Number of Cars",
x = "Model",
y = "Number of Cars") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_brewer(palette = "Set3")
ggplot(mpg_data, aes(x = cyl, y = displ, color = displ)) +
geom_point() +
labs(title = "Relationship between No. of Cylinders and Engine Displacement",
x = "Number of Cylinders",
y = "Engine Displacement (L)") +
scale_color_gradient(low = "cyan", high = "grey")
ggplot(mpg_data, aes(x = cyl, y = displ, color = displ)) +
geom_point() +
labs(title = "Relationship between No. of Cylinders and Engine Displacement",
x = "Number of Cylinders",
y = "Engine Displacement (L)") +
scale_color_gradient(low = "cyan", high = "darkgrey")
ggplot(mpg_data, aes(x = cyl, y = displ, color = displ)) +
geom_point() +
labs(title = "Relationship between No. of Cylinders and Engine Displacement",
x = "Number of Cylinders",
y = "Engine Displacement (L)") +
scale_color_gradient(low = "cyan", high = "darkgreen")
ggplot(mpg_data, aes(x = displ, y = hwy, color = cty)) +
geom_point() +
labs(title = "Relationship between Engine Displacement and Highway MPG",
x = "Engine Displacement (L)",
y = "Highway Miles per Gallon",
color = "City MPG") +
scale_color_gradient(low = "purple", high = "darkviolet")
ggplot(mpg_data, aes(x = displ, y = hwy, color = cty)) +
geom_point() +
labs(title = "Relationship between Engine Displacement and Highway MPG",
x = "Engine Displacement (L)",
y = "Highway Miles per Gallon",
color = "City MPG") +
scale_color_gradient(low = "purple", high = "violet")
ggplot(mpg_data, aes(x = displ, y = hwy, color = cty)) +
geom_point() +
labs(title = "Relationship between Engine Displacement and Highway MPG",
x = "Engine Displacement (L)",
y = "Highway Miles per Gallon",
color = "City MPG") +
scale_color_gradient(low = "purple", high = "lightblue")
ggplot(mpg_data, aes(x = displ, y = hwy, color = cty)) +
geom_point() +
labs(title = "Relationship between Engine Displacement and Highway MPG",
x = "Engine Displacement (L)",
y = "Highway Miles per Gallon",
color = "City MPG") +
scale_color_gradient(low = "purple", high = "darkblue")
ggplot(mpg_data, aes(x = displ, y = hwy, color = cty)) +
geom_point() +
labs(title = "Relationship between Engine Displacement and Highway MPG",
x = "Engine Displacement (L)",
y = "Highway Miles per Gallon",
color = "City MPG") +
scale_color_gradient(low = "grey", high = "darkblue")
ggplot(mpg_data, aes(x = displ, y = hwy, color = cty)) +
geom_point() +
labs(title = "Relationship between Engine Displacement and Highway MPG",
x = "Engine Displacement (L)",
y = "Highway Miles per Gallon",
color = "City MPG") +
scale_color_gradient(low = "black", high = "darkblue")
traffic_data <- read.csv("~/DataScience/CS101/worksheet4c/traffic.csv")
head(traffic_data)
traffic_data <- read.csv("~/DataScience/CS101/worksheet4c/traffic.csv")
head(traffic_data)
str(traffic_data)
nrow(traffic_data)
colnames(traffic_data)
library(dplyr)
junctions_list <- traffic_data %>%
split(.$junction)
